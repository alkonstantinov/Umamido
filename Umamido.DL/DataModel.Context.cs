//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Umamido.DL
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class UmamidoEntities : DbContext
    {
        public UmamidoEntities()
            : base("name=UmamidoEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Good> Good { get; set; }
        public virtual DbSet<GoodDesc> GoodDesc { get; set; }
        public virtual DbSet<GoodTitle> GoodTitle { get; set; }
        public virtual DbSet<Image> Image { get; set; }
        public virtual DbSet<Lang> Lang { get; set; }
        public virtual DbSet<PaymentType> PaymentType { get; set; }
        public virtual DbSet<Req> Req { get; set; }
        public virtual DbSet<Req2Good> Req2Good { get; set; }
        public virtual DbSet<Req2Status> Req2Status { get; set; }
        public virtual DbSet<Restaurant> Restaurant { get; set; }
        public virtual DbSet<RestaurantDesc> RestaurantDesc { get; set; }
        public virtual DbSet<RestaurantTitle> RestaurantTitle { get; set; }
        public virtual DbSet<Slider> Slider { get; set; }
        public virtual DbSet<SliderDesc> SliderDesc { get; set; }
        public virtual DbSet<SliderTitle> SliderTitle { get; set; }
        public virtual DbSet<Status> Status { get; set; }
        public virtual DbSet<Text> Text { get; set; }
        public virtual DbSet<TextDesc> TextDesc { get; set; }
        public virtual DbSet<User> User { get; set; }
        public virtual DbSet<UserLevel> UserLevel { get; set; }
        public virtual DbSet<Message> Message { get; set; }
    
        public virtual ObjectResult<CollectDetails_Result> CollectDetails(Nullable<int> reqId)
        {
            var reqIdParameter = reqId.HasValue ?
                new ObjectParameter("reqId", reqId) :
                new ObjectParameter("reqId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CollectDetails_Result>("CollectDetails", reqIdParameter);
        }
    
        public virtual ObjectResult<ForCollect_Result> ForCollect(Nullable<int> userId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ForCollect_Result>("ForCollect", userIdParameter);
        }
    
        public virtual ObjectResult<ForDeliver_Result> ForDeliver(Nullable<int> userId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ForDeliver_Result>("ForDeliver", userIdParameter);
        }
    
        public virtual ObjectResult<ForDispatch_Result> ForDispatch()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ForDispatch_Result>("ForDispatch");
        }
    
        public virtual ObjectResult<SearchReq_Result> SearchReq(Nullable<System.DateTime> from, Nullable<System.DateTime> to, Nullable<int> restaurantId)
        {
            var fromParameter = from.HasValue ?
                new ObjectParameter("from", from) :
                new ObjectParameter("from", typeof(System.DateTime));
    
            var toParameter = to.HasValue ?
                new ObjectParameter("to", to) :
                new ObjectParameter("to", typeof(System.DateTime));
    
            var restaurantIdParameter = restaurantId.HasValue ?
                new ObjectParameter("restaurantId", restaurantId) :
                new ObjectParameter("restaurantId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SearchReq_Result>("SearchReq", fromParameter, toParameter, restaurantIdParameter);
        }
    }
}
